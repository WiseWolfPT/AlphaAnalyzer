# ALFALYZER - SECURE ENVIRONMENT TEMPLATE
# 
# üîí INSTRU√á√ïES DE SEGURAN√áA CR√çTICAS:
# 1. Copie este arquivo para .env
# 2. Preencha com valores reais (NUNCA fa√ßa commit do .env)
# 3. Use ferramentas como HashiCorp Vault ou AWS Secrets Manager em produ√ß√£o
# 4. Gire as chaves regularmente (a cada 90 dias m√≠nimo)
# 5. Audit logs de acesso √†s chaves mensalmente

# =============================================================================
# CONFIGURA√á√ïES GERAIS
# =============================================================================
NODE_ENV=development
PORT=8080
DATABASE_PATH=./dev.db

# =============================================================================
# üîê SEGURAN√áA E AUTENTICA√á√ÉO (OBRIGAT√ìRIO)
# =============================================================================
# CR√çTICO: Use chaves criptograficamente seguras (256-bit)
# Gere com: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"

# JWT secrets para autentica√ß√£o (OBRIGAT√ìRIO)
JWT_ACCESS_SECRET=SUBSTITUA_POR_CHAVE_SEGURA_256_BITS
JWT_REFRESH_SECRET=SUBSTITUA_POR_CHAVE_SEGURA_256_BITS

# Chave para criptografia de dados sens√≠veis (AES-256-GCM)
ENCRYPTION_KEY=SUBSTITUA_POR_CHAVE_SEGURA_256_BITS

# =============================================================================
# üí∞ APIS FINANCEIRAS (OBRIGAT√ìRIO PARA FUNCIONALIDADE)
# =============================================================================
# SEGURAN√áA: Estas chaves ficam APENAS no backend (sem prefixo VITE_)

# Alpha Vantage - https://www.alphavantage.co/support/#api-key
ALPHA_VANTAGE_API_KEY=SUBSTITUA_POR_SUA_CHAVE_ALPHA_VANTAGE

# Finnhub - https://finnhub.io/dashboard
FINNHUB_API_KEY=SUBSTITUA_POR_SUA_CHAVE_FINNHUB

# Financial Modeling Prep - https://financialmodelingprep.com/developer/docs
FMP_API_KEY=SUBSTITUA_POR_SUA_CHAVE_FMP

# Twelve Data - https://twelvedata.com/dashboard
TWELVE_DATA_API_KEY=SUBSTITUA_POR_SUA_CHAVE_TWELVE_DATA

# =============================================================================
# üè™ INTEGRA√á√ÉO WHOP (OPCIONAL - PARA ASSINATURAS)
# =============================================================================
WHOP_CLIENT_ID=SUBSTITUA_POR_SEU_WHOP_CLIENT_ID
WHOP_CLIENT_SECRET=SUBSTITUA_POR_SEU_WHOP_CLIENT_SECRET

# =============================================================================
# ü§ñ INTEGRA√á√ÉO IA (OPCIONAL - PARA AN√ÅLISES)
# =============================================================================
# SEGURAN√áA: Manter no backend apenas
OPENAI_API_KEY=SUBSTITUA_POR_SUA_CHAVE_OPENAI
GEMINI_API_KEY=SUBSTITUA_POR_SUA_CHAVE_GEMINI

# =============================================================================
# üåê CONFIGURA√á√ïES FRONTEND P√öBLICAS (OK PARA VITE_)
# =============================================================================
VITE_APP_NAME=Alfalyzer
VITE_APP_DESCRIPTION=Professional Financial Analysis Platform
VITE_API_BASE_URL=/api

# Supabase (chaves p√∫blicas por design - anon key √© segura)
VITE_SUPABASE_URL=https://your-project.supabase.co
VITE_SUPABASE_ANON_KEY=SUBSTITUA_POR_SUA_SUPABASE_ANON_KEY

# =============================================================================
# üóÑÔ∏è BANCO DE DADOS EM PRODU√á√ÉO (OPCIONAL)
# =============================================================================
# Para produ√ß√£o, migre de SQLite para PostgreSQL
# DATABASE_URL=postgresql://user:password@host:5432/alfalyzer

# =============================================================================
# üìä OBSERVABILIDADE E MONITORAMENTO (OPCIONAL)
# =============================================================================
# Sentry para error tracking
# SENTRY_DSN=SUBSTITUA_POR_SEU_SENTRY_DSN

# LogRocket para session replay
# LOGROCKET_APP_ID=SUBSTITUA_POR_SEU_LOGROCKET_APP_ID

# =============================================================================
# üõ°Ô∏è SEGURAN√áA ADICIONAL
# =============================================================================
# Rate limiting Redis (opcional, usa mem√≥ria se n√£o configurado)
# REDIS_URL=redis://localhost:6379

# CORS origins permitidas (separadas por v√≠rgula)
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# Rate limiting configura√ß√µes
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# üîß COMANDOS PARA GERAR CHAVES SEGURAS
# =============================================================================
# Execute os comandos abaixo para gerar chaves criptograficamente seguras:
#
# node -e "console.log('JWT_ACCESS_SECRET=' + require('crypto').randomBytes(32).toString('hex'))"
# node -e "console.log('JWT_REFRESH_SECRET=' + require('crypto').randomBytes(32).toString('hex'))"
# node -e "console.log('ENCRYPTION_KEY=' + require('crypto').randomBytes(32).toString('hex'))"