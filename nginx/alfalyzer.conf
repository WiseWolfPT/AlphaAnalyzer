# Alfalyzer Nginx Reverse Proxy Configuration
# This configuration provides multiple access methods through nginx

# Upstream definitions for load balancing and failover
upstream alfalyzer_frontend {
    # Primary frontend servers
    server 127.0.0.1:3000 weight=3 max_fails=2 fail_timeout=5s;
    server 127.0.0.1:3005 weight=2 max_fails=2 fail_timeout=5s;
    server 127.0.0.1:8080 weight=1 max_fails=2 fail_timeout=5s;
}

upstream alfalyzer_api {
    # Primary API server
    server 127.0.0.1:3001 weight=3 max_fails=2 fail_timeout=5s;
    # Backup API server
    server 127.0.0.1:3002 weight=1 max_fails=2 fail_timeout=5s backup;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=50r/s;

# Main application server (port 80)
server {
    listen 80;
    listen [::]:80;
    server_name alfalyzer.local app.alfalyzer.local localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Enable gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/woff2;
    
    # Rate limiting
    limit_req zone=general_limit burst=20 nodelay;
    
    # Root location - proxy to frontend
    location / {
        proxy_pass http://alfalyzer_frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Health check
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
    
    # API routes - proxy to backend with rate limiting
    location /api/ {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://alfalyzer_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API-specific timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Health check and failover
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
    
    # WebSocket support
    location /ws {
        proxy_pass http://alfalyzer_api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket-specific settings
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
    }
    
    # Health check endpoint
    location /nginx-health {
        access_log off;
        return 200 "nginx healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://alfalyzer_frontend;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Served-By "nginx-proxy";
    }
}

# Development server (port 8081)
server {
    listen 8081;
    listen [::]:8081;
    server_name dev.alfalyzer.local localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Development-specific settings
    access_log /var/log/nginx/alfalyzer-dev.log;
    error_log /var/log/nginx/alfalyzer-dev-error.log;
    
    # Proxy to development ports
    location / {
        # Try different development ports
        proxy_pass http://127.0.0.1:3005;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Development timeouts (longer for debugging)
        proxy_connect_timeout 10s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }
    
    # API for development
    location /api/ {
        proxy_pass http://alfalyzer_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# API-only server (port 8082)
server {
    listen 8082;
    listen [::]:8082;
    server_name api.alfalyzer.local localhost;
    
    # API-only server for direct API access
    location / {
        limit_req zone=api_limit burst=20 nodelay;
        
        proxy_pass http://alfalyzer_api;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # API-specific headers
        add_header X-API-Server "nginx-proxy" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
        
        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
            add_header Access-Control-Max-Age 86400;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Health check for API
    location /health {
        proxy_pass http://alfalyzer_api/api/health;
        access_log off;
    }
}

# Load balancer status page (port 8083)
server {
    listen 8083;
    listen [::]:8083;
    server_name localhost;
    
    location / {
        return 200 "Alfalyzer Load Balancer Status\n\nFrontend Servers:\n- 127.0.0.1:3000 (primary)\n- 127.0.0.1:3005 (secondary)\n- 127.0.0.1:8080 (tertiary)\n\nAPI Servers:\n- 127.0.0.1:3001 (primary)\n- 127.0.0.1:3002 (backup)\n\nAccess Points:\n- http://alfalyzer.local (main app)\n- http://dev.alfalyzer.local:8081 (development)\n- http://api.alfalyzer.local:8082 (API only)\n- http://localhost:8083 (this status page)\n";
        add_header Content-Type text/plain;
    }
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }
}